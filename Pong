"""
 Bounces a rectangle around the screen.

 Sample Python/Pygame Programs
 Simpson College Computer Science
 http://programarcadegames.com/
 http://simpson.edu/computer-science/

 Explanation video: http://youtu.be/-GmKoaX2iMs
"""

import pygame
import winsound
# Define some colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
YELLOW = (255, 229, 0)
BLUE = (4, 8, 242)
ORANGE = (255, 131, 0)
pygame.init()

# Set the height and width of the screen
size = [700, 500]
screen = pygame.display.set_mode(size)

pygame.display.set_caption("Pong")

# Loop until the user clicks the close button.
done = False

# Used to manage how fast the screen updates
clock = pygame.time.Clock()

# Starting position of the rectangle
rect_x = 350
rect_y = 250

b_rect_x = 630
b_rect_y = 230

r_rect_y = 270
r_rect_x = 30

g_rect_y = 30
g_rect_x = 325

o_rect_y = 470
o_rect_x = 325

rect_change_x = 2
rect_change_y = 2

# -------- Main Program Loop -----------
while not done:
    # --- Event Processing
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True

    # --- Logic
    # Move the rectangle starting point
    rect_x += rect_change_x
    rect_y += rect_change_y
    o_rect_x = rect_x - 40
    g_rect_x = rect_x - 40

    r_rect_y = rect_y - 40
    b_rect_y = rect_y - 40
    # Bounce the ball if needed
    if rect_y > 479 or rect_y < 10:
        rect_change_y = rect_change_y * -1
    if rect_x > 679 or rect_x < 20:
        rect_change_x = rect_change_x * -1
        # if event.type == pygame.KEYDOWN:
        # Figure out if it was an arrow key. If so
        # adjust speed.
        # if event.key == pygame.K_UP:
        #     b_rect_y = b_rect_y + -2
        # if event.key == pygame.K_DOWN:
        #     b_rect_y = b_rect_y + 2

        # if event.key == pygame.K_w:
        #     r_rect_y = r_rect_y + -2
        # if event.key == pygame.K_s:
        #     r_rect_y = r_rect_y + 2
    # --- Drawing
    # Set the screen background
    screen.fill(BLACK)

    # Draw the rectangle
    Ball = pygame.draw.circle(screen, YELLOW, [rect_x, rect_y], 20)
    R_Paddle = pygame.draw.rect(screen, RED, [r_rect_x, r_rect_y, 20, 80])
    B_Paddle = pygame.draw.rect(screen, BLUE, [b_rect_x, b_rect_y, 20, 80])
    G_Paddle = pygame.draw.rect(screen, GREEN, [g_rect_x, g_rect_y, 80, 20])
    O_Paddle = pygame.draw.rect(screen, ORANGE, [o_rect_x, o_rect_y, 80, 20])

    # --- Wrap-up
    if pygame.Rect.colliderect(Ball, R_Paddle) == True:
        rect_change_x = rect_change_x * -1
        winsound.Beep(604, 60)

    if pygame.Rect.colliderect(Ball, B_Paddle) == True:
        rect_change_x = rect_change_x * -1
        winsound.Beep(604, 60)

    if pygame.Rect.colliderect(Ball,O_Paddle) == True:
        rect_change_y = rect_change_y * -1
        winsound.Beep(604, 60)

    if pygame.Rect.colliderect(Ball,G_Paddle) == True:
        rect_change_y = rect_change_y * -1
        winsound.Beep(604, 60)


    # Limit to 60 frames per second
    clock.tick(80)

    # Go ahead and update the screen with what we've drawn.
    pygame.display.flip()

# Close everything down
pygame.quit()
