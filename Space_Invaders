"""
Use sprites to collect blocks.

Sample Python/Pygame Programs
Simpson College Computer Science
http://programarcadegames.com/
http://simpson.edu/computer-science/

Explanation video: http://youtu.be/4W2AqUetBi4
"""
import pygame
import random

# Define some colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)


class Player(pygame.sprite.Sprite):
    def __init__(self, color, width, height):
        # Call the parent class (Sprite) constructor
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.Surface([width, height])
        self.image.fill(color)

        self.rect = self.image.get_rect()


class Mob(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((30, 40))
        self.image.fill(RED)
        self.rect = self.image.get_rect()
        self.rect.x = random.randrange(screen_width - self.rect.width)
        self.rect.y = random.randrange(-100, -40)
        self.speedy = random.randrange(1, 8)
        self.speedx = random.randrange(-3, 3)

    def update(self):
        self.rect.x += self.speedx
        self.rect.y += self.speedy
        if self.rect.top > screen_height + 10 or self.rect.left < -25 or self.rect.right > screen_width + 20:
            self.rect.x = random.randrange(screen_width - self.rect.width)
            self.rect.y = random.randrange(-100, -40)
            self.speedy = random.randrange(1, 8)


class Laser(pygame.sprite.Sprite):
    def __init__(self, color, width, height):
        # Call the parent class (Sprite) constructor
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.Surface([width, height])
        self.image.fill(color)

        self.rect = self.image.get_rect()

    def update(self):
        self.rect.y = self.rect.y - 10
        # if self.rect.bottom > screen_height + 15 or self.rect.left < -25 or self.rect.right > screen_width + 20:


pygame.init()

# Set the height and width of the screen
screen_width = 400
screen_height = 700
screen = pygame.display.set_mode([screen_width, screen_height])

all_sprites_list = pygame.sprite.Group()

# Create a RED player block

# Loop until the user clicks the close button.
done = False
mobs = pygame.sprite.Group()

# Used to manage how fast the screen updates
clock = pygame.time.Clock()
for i in range(8):
    m = Mob()
    all_sprites_list.add(m)
    mobs.add(m)

spaceship = Player(WHITE, 20, 15)
player = pygame.sprite.Group()
player.add(spaceship)
all_sprites_list.add(spaceship)
spaceship.rect.y = 650
spaceship.rect.x = 200
# -------- Main Program Loop -----------


while not done:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True
    if event.type == pygame.KEYDOWN:
        if spaceship.rect.x <= 0 and pygame.KEYDOWN:
            spaceship.rect.x = 1
        if spaceship.rect.x >= 375 and pygame.KEYDOWN:
            spaceship.rect.x = 374
        if event.key == pygame.K_LEFT:
            spaceship.rect.x = spaceship.rect.x - 5
        if event.key == pygame.K_RIGHT:
            spaceship.rect.x = spaceship.rect.x + 5
        if event.key == pygame.K_SPACE:
            laser = Laser(BLUE, 10, 20)
            laser.rect.y = spaceship.rect.y - 10
            laser.rect.x = spaceship.rect.x
            all_sprites_list.add(laser)
    screen.fill(BLACK)

    all_sprites_list.update()
    # Draw all the spites
    all_sprites_list.draw(screen)
    # Go ahead and update the screen with what we've drawn.
    pygame.display.flip()

    # Limit to 60 frames per second
    clock.tick(60)

pygame.quit()
