"""
Use sprites to collect blocks.

Sample Python/Pygame Programs
Simpson College Computer Science
http://programarcadegames.com/
http://simpson.edu/computer-science/

Explanation video: http://youtu.be/4W2AqUetBi4
"""
import random
from os import path
import pygame
import sched
import time

screen_width = 400
screen_height = 700
screen = pygame.display.set_mode([screen_width, screen_height])
# total_mobs = 10
# Define some colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
pygame.display.init()

img_dir = path.join(path.dirname(__file__), 'H:\\Images')

meteor_img = pygame.image.load(path.join(img_dir, "meteorBrown_med1.png")).convert()
spaceship_img = pygame.image.load(path.join(img_dir, "playerShip1_orange.png")).convert()


class Player(pygame.sprite.Sprite):
    def __init__(self, color, width, height):
        self.image = pygame.Surface([width, height])
        pygame.sprite.Sprite.__init__(self)
        self.image = spaceship_img
        self.image = pygame.transform.scale(self.image, (50, 40))
        self.image.set_colorkey(WHITE)
        self.rect = self.image.get_rect()
        self.speedx = 0
        self.speedy = 0

    def update(self):

        keystate = pygame.key.get_pressed()
        if keystate[pygame.K_RIGHT]:
            self.speedx = 8
            self.rect.x += self.speedx
        if keystate[pygame.K_DOWN]:
            self.speedy = 8
            self.rect.y += self.speedy
        if keystate[pygame.K_UP]:
            self.speedy = -8
            self.rect.y += self.speedy
        if keystate[pygame.K_SPACE]:
            laser = Laser(BLUE, 10, 20)
            laser.rect.y = spaceship.rect.y - 25
            laser.rect.x = spaceship.rect.x + 20
            all_sprites_list.add(laser)
            lasers.add(laser)
        if keystate[pygame.K_LEFT]:
            self.speedx = -8
            self.rect.x += self.speedx
        if self.rect.right > screen_width:
            self.rect.right = screen_width
        if self.rect.left < 0:
            self.rect.left = 0
        if self.rect.top < 0:
            self.rect.top = screen_height
        if self.rect.bottom > screen_height:
            self.rect.bottom = screen_height


class Mob(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = meteor_img
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.x = random.randrange(40, 360)
        self.rect.y = random.randrange(-50, -40)
        self.speedy = random.randrange(3, 8)
        self.speedx = random.randrange(-3, 3)

    def update(self):
        self.rect.x += self.speedx
        self.rect.y += self.speedy
        if self.rect.top > screen_height + 10:
            self.rect.x = random.randrange(screen_width - self.rect.width)
            self.rect.y = random.randrange(-100, -40)
            self.speedy = random.randrange(1, 8)
        if self.rect.x < 0 or self.rect.right > screen_width:
            self.speedx = self.speedx * -1


class Laser(pygame.sprite.Sprite):
    def __init__(self, color, width, height):
        # Call the parent class (Sprite) constructor
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.Surface([width, height])
        self.image.fill(color)

        self.rect = self.image.get_rect()
        self.speedy = 8

    def update(self):
        self.rect.y = self.rect.y - self.speedy
        if self.rect.bottom > screen_height:
            self.kill()


pygame.init()

# Set the height and width of the screen


all_sprites_list = pygame.sprite.Group()

done = False
pygame.display.set_caption('Space Invaders')

lasers = pygame.sprite.Group()

clock = pygame.time.Clock()
mobs = pygame.sprite.Group()
for i in range(10):
    m = Mob()
    all_sprites_list.add(m)
    mobs.add(m)
spaceship = Player(WHITE, 20, 15)
player = pygame.sprite.Group()
player.add(spaceship)
all_sprites_list.add(spaceship)
spaceship.rect.y = 650
spaceship.rect.x = 200
# -------- Main Program Loop -----------


while not done:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True
    screen.fill(BLACK)
    hits = pygame.sprite.groupcollide(lasers, mobs, False, pygame.sprite.collide_circle)
    for hit in hits:
        m = Mob()
        mobs.add(m)
        all_sprites_list.add(m)
    all_sprites_list.update()
    all_sprites_list.draw(screen)
    pygame.display.flip()
    if pygame.sprite.groupcollide(player, mobs, False, True):
        done = True
    clock.tick(60)
pygame.quit()
